// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: vs:vert
      frag: fs:frag
      properties: &props
        mainTexture:    { value: white }
        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }
        progressValue:  { value: 1 }
        verticalBillboarding: { value: 1 }
  - name: transparent
    passes:
    - vert: vs:vert
      frag: fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%

CCProgram vs %{
  precision highp float;
  #include <legacy/input-standard>
  #include <builtin/uniforms/cc-global>
  #include <legacy/decode-base>
  #include <legacy/local-batch>
  #include <legacy/fog-vs>
  #include <legacy/shadow-map-vs>

  #if USE_BILLBOARD
    #include "../chunks/billboard-translate.chunk"
  #endif

  uniform vConstant {
    float verticalBillboarding;
  };

  #if USE_INSTANCING
    in vec4 a_instanced_mix_color;
    in vec4 a_instanced_bar_params;
    in vec3 a_instanced_position_scale;
  #endif

  #if USE_VERTEX_COLOR
    in vec4 a_color;
  #endif

  out vec3 v_position;
  out vec3 v_normal;
  out vec2 v_uv;

  #if USE_VERTEX_COLOR
    out vec4 v_color;
  #endif

  #if USE_INSTANCING
    out vec4 v_instanced_mix_color;
    out vec4 v_instanced_bar_params;
  #endif

  #if ENABLE_POSITION_SCALE
    float scaleTag = 1.;
  #endif

  vec4 vert() {
    StandardVertInput In;
    CCVertInput(In);

    mat4 matWorld, matWorldIT;
    CCGetWorldMatrixFull(matWorld, matWorldIT);

    // vec4 pos = matWorld * In.position;

    vec4 inPos = In.position;
    #if USE_INSTANCING && ENABLE_POSITION_SCALE
      inPos.xyz *= a_instanced_position_scale.xyz * scaleTag;
    #endif
    vec4 pos = matWorld * inPos;

    v_position = pos.xyz;
    v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);
    v_uv = a_texCoord;
    #if USE_VERTEX_COLOR
      v_color = a_color;
    #endif
    #if USE_INSTANCING
      v_instanced_mix_color = a_instanced_mix_color;
      v_instanced_bar_params = a_instanced_bar_params;
    #endif

    CC_TRANSFER_FOG(pos);
    CC_TRANSFER_SHADOW(pos);

    #if USE_BILLBOARD
      // vec4 outPos = In.position;
      vec4 outPos = inPos;
      // BILLBOARD_TRANSLATION(outPos, matWorld, matWorldIT, verticalBillboarding)
      billboard_translation(outPos, matWorld, matWorldIT, verticalBillboarding);
      return outPos;
    #else
      // return cc_matProj * (cc_matView * matWorld) * In.position;
      return cc_matProj * (cc_matView * matWorld) * inPos;
    #endif
  }
}%

CCProgram fs %{
  precision highp float;
  #include <legacy/output>
  #include <legacy/fog-fs>

  in vec2 v_uv;
  in vec3 v_position;
  in vec4 v_color;

  #if USE_INSTANCING
    in vec4 v_instanced_mix_color;
    in vec4 v_instanced_bar_params;
  #endif

  #if ENABLE_PROGRESS
    uniform ProgressParams {
      float progressValue;
    };
  #endif

  #if USE_TEXTURE
    uniform sampler2D mainTexture;
  #endif

  uniform Constant {
    vec4 mainColor;
  };

  vec4 frag () {
    vec4 col = mainColor;
    #if USE_VERTEX_COLOR
      col *= v_color;
    #endif
    #if USE_TEXTURE
      col *= texture(mainTexture, v_uv);
    #endif

    #if ENABLE_PROGRESS
      #if INVERT_PROGRESS
        const float multiplier = -1.;
      #else
        const float multiplier = 1.;
      #endif

      #if VERTICAL_FILL
        float uvVal = v_uv.y;
      #else
        float uvVal = v_uv.x;
      #endif

      #if USE_INSTANCING
        float targetVal = v_instanced_bar_params.x;
      #else
        float targetVal = progressValue;
      #endif

      col.a *= sign(multiplier * (targetVal - uvVal));
    #endif

    #if USE_INSTANCING
      col *= v_instanced_mix_color;
    #endif

    CC_APPLY_FOG(col, v_position);
    return CCFragOutput(col);
  }
}%
