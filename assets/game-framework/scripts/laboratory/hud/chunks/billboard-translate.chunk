#if USE_BILLBOARD
    // #define BILLBOARD_TRANSLATION(position, matWorld, matWorldInv, vertexBillboarding) \
    //     { \
    //         vec4 center = vec4(0., 0., 0., 0.); \
    //         vec4 viewDir = matWorldInv * cc_cameraPos; \
    //         vec3 normalDir = viewDir.xyz - center.xyz; \
    //         normalDir.y = normalDir.y * vertexBillboarding; \
    //         normalDir = normalize(normalDir); \
    //         vec3 upDir = abs(normalDir.y) > 0.999 ? vec3(0., 0., 1.) : vec3(0., 1., 0.); \
    //         vec3 rightDir = cross(upDir, normalDir); \
    //         rightDir = normalize(rightDir); \
    //         upDir = normalize(cross(normalDir, rightDir)); \
    //         vec3 centerOff = position.xyz; \
    //         vec3 localPos = vec3( \
    //             center.x + rightDir.x * centerOff.x + upDir.x * centerOff.y + normalDir.x * centerOff.z, \
    //             center.y + rightDir.y * centerOff.x + upDir.y * centerOff.y + normalDir.y * centerOff.z, \
    //             center.z + rightDir.z * centerOff.x + upDir.z * centerOff.y + normalDir.z * centerOff.z \
    //         ); \
    //         position = cc_matProj * (cc_matView * matWorld) * vec4(localPos.xyz, position.w); \
    //     } \
    void billboard_translation(inout vec4 position, inout mat4 matWorld, inout mat4 matWorldInv, float vertexBillboarding) {
        vec4 center = vec4(0., 0., 0., 0.);
        vec4 viewDir = matWorldInv * cc_cameraPos;
        vec3 normalDir = viewDir.xyz - center.xyz;
        normalDir.y = normalDir.y * vertexBillboarding;
        normalDir = normalize(normalDir);
        vec3 upDir = abs(normalDir.y) > 0.999 ? vec3(0., 0., 1.) : vec3(0., 1., 0.);
        vec3 rightDir = cross(upDir, normalDir);
        rightDir = normalize(rightDir);
        upDir = normalize(cross(normalDir, rightDir));
        vec3 centerOff = position.xyz;
        vec3 localPos = vec3(
            center.x + rightDir.x * centerOff.x + upDir.x * centerOff.y + normalDir.x * centerOff.z,
            center.y + rightDir.y * centerOff.x + upDir.y * centerOff.y + normalDir.y * centerOff.z,
            center.z + rightDir.z * centerOff.x + upDir.z * centerOff.y + normalDir.z * centerOff.z
        );
        position = cc_matProj * (cc_matView * matWorld) * vec4(localPos.xyz, position.w);
    }
#endif